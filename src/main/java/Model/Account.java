package Model;

public class Account {

    /*
     * Type of Account
     */
    public enum Account_Type {
        NULL, NORMAL, RETIREMENT, MINOR
    };
    public static final float[] INTREST_RATES = {0.f, 0.05f, 0.1f, 0.1f};
    public Account_Type account_type;
    /**
     * An id for this Account which will be automatically generated by the database.
     * -1 for NULL account
     */
    public int account_num;
    /**
     * A username for this Account (must be unique and not blank)
     */
    public String username;
    /**
     * A password for this account (must be over 4 characters)
     */
    public String password;

    /*
     * Account balance in cents
     */
    public long balance_cnts;

    /*
     * Interest rate.
     * Inital value is based on account type
     */
    public float intrest_rt;

    /*
     * Personal info associated with account
     */
    public class Personal_Info {
        public String full_name;
        public String address;
        public String phone_num;
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Personal_Info info = (Personal_Info)o;
            return full_name.equals(info.full_name) && address.equals(info.address) &&
                phone_num.equals(info.phone_num);
        }
        @Override
        public String toString() {
            return "Personal_Info{full_name='" + full_name + '\'' +
                ", address='" + address + '\'' +
                ", phone_num='" + phone_num + '\'' +
                '}';
        }
    }
    public Personal_Info personal_info;
    /**
     * A default, no-args constructor, as well as correctly formatted getters and setters, are needed for
     * Jackson Objectmapper to work.
     */
    public Account() {
        /* VOID account */
        setType(Account_Type.NULL);
        this.account_num = -1;
        this.username = "VOID";
        this.password = "";
    }
    /**
     * When posting a new Account, the id can be generated by the database. In that case, a constructor without
     * account_num is needed.
     * @param username
     * @param password
     */
    public Account(String username, String password){
        setType(Account_Type.NORMAL);
        this.username = username;
        this.password = password;
    }
    /**
     * Whem retrieving an Account from the database, all fields will be needed. In that case, a constructor with all
     * fields is needed.
     * @param account_num
     * @param username
     * @param password
     */
    public Account(int account_num, String username, String password) {
        this.account_num = account_num;
        this.username = username;
        this.password = password;
    }
    /*
     * Get/Set account type
     */
    public Account_Type getType() {
        return this.account_type;
    }
    public void setType(Account_Type type) {
        this.account_type = type;
        this.intrest_rt = INTREST_RATES[type.ordinal()];
    }
    /**
     * Get/Set account_num
     */
    public int getAccount_num() {
        return account_num;
    }
    public void setAccount_num(int account_num) {
        this.account_num = account_num;
    }
    /**
     * Get/Set username;
     */
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    /**
     * Get/Set password
     */
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    /**
     * Overriding the default equals() method adds functionality to tell when two objects are identical,
     * allowing Assert.assertEquals and List.contains to function.
     * @param o the other object.
     * @return true if o is equal to this object.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Account account = (Account) o;
        return account_type == account.account_type && account_num == account.account_num &&
            username.equals(account.username) && password.equals(account.password) &&
            balance_cnts == account.balance_cnts && intrest_rt == account.intrest_rt &&
            personal_info.equals(account.personal_info);
    }
    /**
     * Overriding the default toString() method allows for easy debugging.
     * @return a String representation of this class.
     */
    @Override
    public String toString() {
        return "Account{account_type=" + account_type.name() +
                ", account_num=" + account_num +
                ", username='" + username + '\'' +
                ", password='" + password + '\'' +
                ", balance_cnts=" + balance_cnts +
                ", intrest_rt=" + intrest_rt +
                ", personal_info=" + personal_info.toString() +
                '}';
    }
}
